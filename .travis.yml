sudo: false
language: cpp

env:
  global:
    - PROJECT_VERSION_MAJOR="0"
    - PROJECT_VERSION_MINOR="1"
    - PROJECT_VERSION_PATCH="${TRAVIS_BUILD_NUMBER}"
    - PROJECT_VERSION="${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}"
    - PACKAGE_ARCHITECTURE="amd64"
    - PACKAGE_NAME="libbzapi"
    - PACKAGE_NAME_DEB="${PACKAGE_NAME}_${PROJECT_VERSION}_ubuntu_16.04.${PACKAGE_ARCHITECTURE}.deb"
    - PACKAGE_DISTRO="xenial"
    - secure: "TcBMLmUiyiBfV94xOpLtKxttbCWveCoO03755UjsM6ZyREvj8TilxAJPGgg4nJzBWUvnW1t/G/CP+iEeldCn+pESikh0jlZdH+42OREBfHLJrdM3S+tbFmmgpq2uV5dwyxz95SCfvvKP9lNq4TsSzFWYB5LzeyYcVU9H7qNo4wUeIvDLcG6Yluk3ZRLCXMLXnOQn2wrQjW+yuSj/L6uPyzdhQkrl8LCjth4+1rop1Bx59sK9giFwtzEpzBZhVdeN+EZoLYHUrEfWJbNg8r17NGw38qYfaewap0Oj8aH9irvQEyh0+8ovC47aKviGnrwodLYj3BKzTpgnp6URtJY0ECek+L7HAciT3Mj6uvf/9Mi5fFkP757jqAXUOnxZS8XhZ6I3NX8lEjx09bm0dvW6ncFhARIG86Rl/zrPpA3KG2cABRiUGDr01fpHKlQcW6F6xf/S04zbx3t2bqzLPEuKkD8s7ofczcjgS9H51CrAYxXOIM8uGBATwbqMsNkVRQUn0TE9igBJUNBtv/FSKL6mVXeVbWE3UoCSoVugDshjoB0Qi1Eftp1eKPeJdgfEc0urVRW45TAZPwYl1IBl8f0CNzybXPB2DB/jInJZlRQqMT3TSecFhfGslObLHUbGr4slCYGOUuLa1pjFmaapcpHxmpY4EevpAzV+5dNzFp0bNIw="
    - secure: "sCwJ9t4NXRAJ8BtAVI/AXZSxrWILz9XQeWzWiwOLC9V9XYEvO1Eo8vcHRqdRi5QVJ1JxuPvBqVVIaH9QIqWv7p87TCSdncWmqZXv1DC/moBa7EZ8XHKaL4xUYTv+8ur4BnaeUp/l6+NxTQH6leClOiJNS9oijdVvdZOSa+ajEC+3lUhLNAQ2iDkL25Nj2bMnRNQ05WXDlULSrJIHmosO0g9w86UNYZWsQBKv915Cfnt5i3JuATaV+DysbV2W052eG7zdjN8KAr+7bd0fKHDjjBCCPksI7XZqaXT1U4wxKNZlvkY5PZ5NKGLu4sRyX0k8SrQygj+xc7YhSpRDUDmhXTmo7kA7kAEG9BZT/kpN+5AFT0j9BLR0FhNKkiDldJN7K+9JwgXYjSboEfLrBWw9A+2epN+oudw39oXoGUlN/1UsR9ifSfmiwr+HxiSJXFKVRbEQWQLdOt2l5oMGeVJYmcMP/RcIRM4orxKNg6JfhUVAy9KmpWa7zuMXE3Wq7IYcKk6S9SQ+YoxXANAEiqpyHyj3A3r7jec14SSyxEGKuZwue8TeQXAH4AM7L+dmUOGF/5Q3VpMkIT9yeuI/Z6zXjxDONOBSqiGoxIS+1uBYQels7O7aBdAWdxBJ4SqBIeSL2l2TDaZFB+mMcl03mn8AD9pMYVH5GeryaHGC9hZBBSg="

matrix:
  include:
    - os: linux
      dist: xenial
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: 'deb [trusted=yes] http://ppa.launchpad.net/maarten-fonville/protobuf/ubuntu xenial main'
          packages:
            - g++-7
            - pkg-config
            - protobuf-compiler
            - libprotobuf-dev
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
        - CMAKE_URL="https://cmake.org/files/v3.13/cmake-3.13.1-Linux-x86_64.tar.gz"
        - CMAKE_COMMAND="$HOME/.local/bin/cmake -DPMD_EXE=$HOME/pmd-bin-6.6.0/bin/run.sh -DENABLE_GCOV=ON"

    - os: osx
      osx_image: xcode10.2
      env:
        - MATRIX_EVAL="brew install git-lfs && brew uninstall --ignore-dependencies boost"
        - CMAKE_COMMAND="cmake "

cache:
  directories:
    - $HOME/.local

before_install:
  - eval "${MATRIX_EVAL}"
  - mkdir -p $HOME/.local
  - |
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      pip install --user cpp-coveralls
      if [ ! -e $HOME/.local/bin/cmake ]; then
        echo "CMake not found in the cache, get and extract it..."
        travis_retry curl -L ${CMAKE_URL} \
          | tar -xz -C $HOME/.local --strip-components=1
      else
        echo "Using cached CMake"
      fi
    fi
  - |
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      if [ ! -e $HOME/pmd-bin-6.6.0/bin/run.sh ]; then
        echo "PMD not found in the cache, get and extract it..."
        cd $HOME
        travis_retry curl -OL "https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.6.0/pmd-bin-6.6.0.zip"
        unzip pmd-bin-6.6.0.zip
        rm pmd-bin-6.6.0.zip
      else
        echo "Using cached PMD"
      fi
    fi

compiler:
  - gcc

before_script:
  - cd ${TRAVIS_BUILD_DIR}
  - mkdir build
  - cd build
  - >
    if { [ "$TRAVIS_BRANCH" = "master" ] || [ $TRAVIS_BRANCH == *"release"* ]; } && [ $TRAVIS_OS_NAME = "linux" ] ; then
        ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=RelWithDebInfo -DPROJECT_VERSION_MAJOR=${PROJECT_VERSION_MAJOR} -DPROJECT_VERSION_MINOR=${PROJECT_VERSION_MINOR} -DPROJECT_VERSION_PATCH=${PROJECT_VERSION_PATCH} ..
      else
        ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=Debug -DENABLE_GCOV=ON -DPROJECT_VERSION_MAJOR=${PROJECT_VERSION_MAJOR} -DPROJECT_VERSION_MINOR=${PROJECT_VERSION_MINOR} -DPROJECT_VERSION_PATCH=${PROJECT_VERSION_PATCH} ..
    fi

script:
  - ${CXX} --version
  - echo CXXFLAGS=${CXXFLAGS}
  - git lfs install
  - git lfs pull
  - make -j2
  - make static_analysis
  - ctest -V
  - |
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      make package
    fi

after_success:
  - |
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      coveralls -r ${TRAVIS_BUILD_DIR} -e 'build/boost' -e 'build/openssl' -e 'build/googletest' -e 'build/proto' -e 'build/jsoncpp' -e 'build/CMakeFiles' -e 'mocks' -e 'crypto/test' -e 'node/test' -e 'swarm/test' -e 'database/test' -e 'library/test' -e 'include' -e 'utils' --gcov-options '\-lp'
    fi
  - echo ${TRAVIS_BRANCH}
  - if [ "$TRAVIS_BRANCH" = "master" ] ; then PACKAGE_COMPONENT="stable" ; else PACKAGE_COMPONENT="unstable" ; fi
  - |
    if [ "$TRAVIS_BRANCH" = "master" ] || [ "$TRAVIS_BRANCH" = "devel" ] || [[ $TRAVIS_BRANCH == *"release"* ]]; then
      if [ "$TRAVIS_OS_NAME" = "linux"  ]; then
          travis_retry curl -u${REPO_USER}:${REPO_PASSWORD} -XPUT "https://bluzelle.jfrog.io/bluzelle/debian-local/pool/${PACKAGE_NAME_DEB};deb.distribution=${PACKAGE_DISTRO};deb.component=${PACKAGE_COMPONENT};deb.architecture=${PACKAGE_ARCHITECTURE}" -T ${TRAVIS_BUILD_DIR}/build/${PACKAGE_NAME_DEB}
      fi
    fi
